/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IAaveUsdc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveUsdc__factory>;
    getContractFactory(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: "IPoolingManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolingManager__factory>;
    getContractFactory(
      name: "IRETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRETH__factory>;
    getContractFactory(
      name: "IRocketDepositPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRocketDepositPool__factory>;
    getContractFactory(
      name: "IRocketStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRocketStorage__factory>;
    getContractFactory(
      name: "ISavingDai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISavingDai__factory>;
    getContractFactory(
      name: "IStarknetBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStarknetBridge__factory>;
    getContractFactory(
      name: "IStarknetMessaging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStarknetMessaging__factory>;
    getContractFactory(
      name: "IStrategyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategyBase__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWstETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWstETH__factory>;
    getContractFactory(
      name: "ErrorLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ErrorLib__factory>;
    getContractFactory(
      name: "Messaging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Messaging__factory>;
    getContractFactory(
      name: "StarkneErc20BridgeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarkneErc20BridgeMock__factory>;
    getContractFactory(
      name: "StarknetEthBridgeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetEthBridgeMock__factory>;
    getContractFactory(
      name: "MockV3Aggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockV3Aggregator__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "WstethMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstethMintable__factory>;
    getContractFactory(
      name: "ERC4626Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626Mock__factory>;
    getContractFactory(
      name: "IPoolingManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolingManagerMock__factory>;
    getContractFactory(
      name: "PoolingManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolingManagerMock__factory>;
    getContractFactory(
      name: "StarknetMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetMock__factory>;
    getContractFactory(
      name: "IERC20Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Extended__factory>;
    getContractFactory(
      name: "TestStrategyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStrategyBase__factory>;
    getContractFactory(
      name: "UniswapV3FactoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3FactoryMock__factory>;
    getContractFactory(
      name: "IMinimalSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalSwapRouter__factory>;
    getContractFactory(
      name: "UniswapRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapRouterMock__factory>;
    getContractFactory(
      name: "PoolingManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolingManager__factory>;
    getContractFactory(
      name: "AAVECompatWstETHToETHPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AAVECompatWstETHToETHPriceFeed__factory>;
    getContractFactory(
      name: "AaveUsdcStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveUsdcStrategy__factory>;
    getContractFactory(
      name: "SavingDaiStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SavingDaiStrategy__factory>;
    getContractFactory(
      name: "StrategyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyBase__factory>;
    getContractFactory(
      name: "UniswapV3Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Strategy__factory>;
    getContractFactory(
      name: "UniswapV3StrategyDiffDecimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3StrategyDiffDecimals__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC4626",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC4626",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "ISwapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IAaveUsdc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveUsdc>;
    getContractAt(
      name: "IChainlinkAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: "IPoolingManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolingManager>;
    getContractAt(
      name: "IRETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRETH>;
    getContractAt(
      name: "IRocketDepositPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRocketDepositPool>;
    getContractAt(
      name: "IRocketStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRocketStorage>;
    getContractAt(
      name: "ISavingDai",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISavingDai>;
    getContractAt(
      name: "IStarknetBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStarknetBridge>;
    getContractAt(
      name: "IStarknetMessaging",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStarknetMessaging>;
    getContractAt(
      name: "IStrategyBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategyBase>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWstETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWstETH>;
    getContractAt(
      name: "ErrorLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ErrorLib>;
    getContractAt(
      name: "Messaging",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Messaging>;
    getContractAt(
      name: "StarkneErc20BridgeMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StarkneErc20BridgeMock>;
    getContractAt(
      name: "StarknetEthBridgeMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetEthBridgeMock>;
    getContractAt(
      name: "MockV3Aggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockV3Aggregator>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "WETH9",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "WstethMintable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WstethMintable>;
    getContractAt(
      name: "ERC4626Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626Mock>;
    getContractAt(
      name: "IPoolingManagerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolingManagerMock>;
    getContractAt(
      name: "PoolingManagerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolingManagerMock>;
    getContractAt(
      name: "StarknetMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetMock>;
    getContractAt(
      name: "IERC20Extended",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Extended>;
    getContractAt(
      name: "TestStrategyBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestStrategyBase>;
    getContractAt(
      name: "UniswapV3FactoryMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3FactoryMock>;
    getContractAt(
      name: "IMinimalSwapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalSwapRouter>;
    getContractAt(
      name: "UniswapRouterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapRouterMock>;
    getContractAt(
      name: "PoolingManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolingManager>;
    getContractAt(
      name: "AAVECompatWstETHToETHPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AAVECompatWstETHToETHPriceFeed>;
    getContractAt(
      name: "AaveUsdcStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveUsdcStrategy>;
    getContractAt(
      name: "SavingDaiStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SavingDaiStrategy>;
    getContractAt(
      name: "StrategyBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyBase>;
    getContractAt(
      name: "UniswapV3Strategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Strategy>;
    getContractAt(
      name: "UniswapV3StrategyDiffDecimals",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3StrategyDiffDecimals>;

    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC4626",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IAaveUsdc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAaveUsdc>;
    deployContract(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: "IPoolingManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolingManager>;
    deployContract(
      name: "IRETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRETH>;
    deployContract(
      name: "IRocketDepositPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDepositPool>;
    deployContract(
      name: "IRocketStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketStorage>;
    deployContract(
      name: "ISavingDai",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISavingDai>;
    deployContract(
      name: "IStarknetBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStarknetBridge>;
    deployContract(
      name: "IStarknetMessaging",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStarknetMessaging>;
    deployContract(
      name: "IStrategyBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyBase>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWstETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWstETH>;
    deployContract(
      name: "ErrorLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ErrorLib>;
    deployContract(
      name: "Messaging",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Messaging>;
    deployContract(
      name: "StarkneErc20BridgeMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarkneErc20BridgeMock>;
    deployContract(
      name: "StarknetEthBridgeMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarknetEthBridgeMock>;
    deployContract(
      name: "MockV3Aggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockV3Aggregator>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "WstethMintable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WstethMintable>;
    deployContract(
      name: "ERC4626Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626Mock>;
    deployContract(
      name: "IPoolingManagerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolingManagerMock>;
    deployContract(
      name: "PoolingManagerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolingManagerMock>;
    deployContract(
      name: "StarknetMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarknetMock>;
    deployContract(
      name: "IERC20Extended",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Extended>;
    deployContract(
      name: "TestStrategyBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestStrategyBase>;
    deployContract(
      name: "UniswapV3FactoryMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3FactoryMock>;
    deployContract(
      name: "IMinimalSwapRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalSwapRouter>;
    deployContract(
      name: "UniswapRouterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapRouterMock>;
    deployContract(
      name: "PoolingManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolingManager>;
    deployContract(
      name: "AAVECompatWstETHToETHPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AAVECompatWstETHToETHPriceFeed>;
    deployContract(
      name: "AaveUsdcStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveUsdcStrategy>;
    deployContract(
      name: "SavingDaiStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SavingDaiStrategy>;
    deployContract(
      name: "StrategyBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrategyBase>;
    deployContract(
      name: "UniswapV3Strategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Strategy>;
    deployContract(
      name: "UniswapV3StrategyDiffDecimals",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3StrategyDiffDecimals>;

    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC4626",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC4626",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IUniswapV3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "ISwapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IAaveUsdc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAaveUsdc>;
    deployContract(
      name: "IChainlinkAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: "IPoolingManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolingManager>;
    deployContract(
      name: "IRETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRETH>;
    deployContract(
      name: "IRocketDepositPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketDepositPool>;
    deployContract(
      name: "IRocketStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRocketStorage>;
    deployContract(
      name: "ISavingDai",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISavingDai>;
    deployContract(
      name: "IStarknetBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStarknetBridge>;
    deployContract(
      name: "IStarknetMessaging",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStarknetMessaging>;
    deployContract(
      name: "IStrategyBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyBase>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWstETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWstETH>;
    deployContract(
      name: "ErrorLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ErrorLib>;
    deployContract(
      name: "Messaging",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Messaging>;
    deployContract(
      name: "StarkneErc20BridgeMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarkneErc20BridgeMock>;
    deployContract(
      name: "StarknetEthBridgeMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarknetEthBridgeMock>;
    deployContract(
      name: "MockV3Aggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockV3Aggregator>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "WETH9",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "WstethMintable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WstethMintable>;
    deployContract(
      name: "ERC4626Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC4626Mock>;
    deployContract(
      name: "IPoolingManagerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolingManagerMock>;
    deployContract(
      name: "PoolingManagerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolingManagerMock>;
    deployContract(
      name: "StarknetMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StarknetMock>;
    deployContract(
      name: "IERC20Extended",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Extended>;
    deployContract(
      name: "TestStrategyBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestStrategyBase>;
    deployContract(
      name: "UniswapV3FactoryMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3FactoryMock>;
    deployContract(
      name: "IMinimalSwapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinimalSwapRouter>;
    deployContract(
      name: "UniswapRouterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapRouterMock>;
    deployContract(
      name: "PoolingManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolingManager>;
    deployContract(
      name: "AAVECompatWstETHToETHPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AAVECompatWstETHToETHPriceFeed>;
    deployContract(
      name: "AaveUsdcStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveUsdcStrategy>;
    deployContract(
      name: "SavingDaiStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SavingDaiStrategy>;
    deployContract(
      name: "StrategyBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrategyBase>;
    deployContract(
      name: "UniswapV3Strategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Strategy>;
    deployContract(
      name: "UniswapV3StrategyDiffDecimals",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3StrategyDiffDecimals>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
