{
  "address": "0xe3A697d9730F6211AaA057aA03C3b496a62beb08",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolingManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoL1Report",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughSuccessCalls",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1BridgeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "BridgeCancelDepositRequestClaimedAndDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1BridgeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelDepositRequestBridgeSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MessageResentToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "PendingRequestsExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyReportL1Length",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "l1Nav",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StrategyReportL1[]",
          "name": "strategyReportL1",
          "type": "tuple[]"
        }
      ],
      "name": "ReportHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct StrategyInfo",
          "name": "strategyInfo",
          "type": "tuple"
        }
      ],
      "name": "StrategyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_HANDLER_SELECTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeInteractionInfo[]",
          "name": "bridgeDepositInfo",
          "type": "tuple[]"
        }
      ],
      "name": "bridgeEthFeesMultiplicator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1BridgeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelDepositRequestBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1BridgeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "l2BridgeEthFee",
          "type": "uint256"
        }
      ],
      "name": "claimBridgeCancelDepositRequestAndDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethWrapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executePendingRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeInteractionInfo[]",
          "name": "bridgeWithdrawInfo",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyReportL2[]",
          "name": "strategyReportL2",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeInteractionInfo[]",
          "name": "bridgeDepositInfo",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "l2BridgeEthFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "l2MessagingEthFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSuccessCall",
          "type": "uint256"
        }
      ],
      "name": "handleReport",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyReportL1Length",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "l1Nav",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyReportL1[]",
          "name": "strategyReportL1",
          "type": "tuple[]"
        }
      ],
      "name": "hashFromReportL1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeInteractionInfo[]",
          "name": "bridgeWithdrawInfo",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyReportL2[]",
          "name": "strategyReportL2",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BridgeInteractionInfo[]",
          "name": "bridgeDepositInfo",
          "type": "tuple[]"
        }
      ],
      "name": "hashFromReportL2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2PoolingManager",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethWrapped",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2PoolingManager",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "l1Strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequestsExecuted",
      "outputs": [
        {
          "internalType": "address",
          "name": "l1Strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "l1Nav",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRequestsExecutedCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "registerStrategy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_l2PoolingManager",
          "type": "uint256"
        }
      ],
      "name": "setPoolingManager",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetMessaging",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7ec6855dfad0116ef848796e8861434550c599364b6fa986b887ebf520eda20a",
  "receipt": {
    "to": null,
    "from": "0xf8b414eFD8CB72097edAb449CeAd5dB10Fc12d99",
    "contractAddress": "0xe3A697d9730F6211AaA057aA03C3b496a62beb08",
    "transactionIndex": 12,
    "gasUsed": "3179338",
    "logsBloom": "0x
    "blockHash": "0xd6094d9e16d3115b018e0c79a8a31263accda19c72bc85a83aec3e8900acec1e",
    "transactionHash": "0x7ec6855dfad0116ef848796e8861434550c599364b6fa986b887ebf520eda20a",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10548477,
        "transactionHash": "0x7ec6855dfad0116ef848796e8861434550c599364b6fa986b887ebf520eda20a",
        "address": "0xe3A697d9730F6211AaA057aA03C3b496a62beb08",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 38,
        "blockHash": "0xd6094d9e16d3115b018e0c79a8a31263accda19c72bc85a83aec3e8900acec1e"
      }
    ],
    "blockNumber": 10548477,
    "cumulativeGasUsed": "4835701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23c73ce4b0f4a2d5f20335bf138f05d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolingManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoL1Report\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSuccessCalls\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1BridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BridgeCancelDepositRequestClaimedAndDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1BridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelDepositRequestBridgeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MessageResentToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"PendingRequestsExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyReportL1Length\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1Nav\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StrategyReportL1[]\",\"name\":\"strategyReportL1\",\"type\":\"tuple[]\"}],\"name\":\"ReportHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct StrategyInfo\",\"name\":\"strategyInfo\",\"type\":\"tuple\"}],\"name\":\"StrategyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_HANDLER_SELECTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeInteractionInfo[]\",\"name\":\"bridgeDepositInfo\",\"type\":\"tuple[]\"}],\"name\":\"bridgeEthFeesMultiplicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequestBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2BridgeEthFee\",\"type\":\"uint256\"}],\"name\":\"claimBridgeCancelDepositRequestAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executePendingRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeInteractionInfo[]\",\"name\":\"bridgeWithdrawInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyReportL2[]\",\"name\":\"strategyReportL2\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeInteractionInfo[]\",\"name\":\"bridgeDepositInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"l2BridgeEthFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2MessagingEthFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSuccessCall\",\"type\":\"uint256\"}],\"name\":\"handleReport\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyReportL1Length\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1Nav\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyReportL1[]\",\"name\":\"strategyReportL1\",\"type\":\"tuple[]\"}],\"name\":\"hashFromReportL1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeInteractionInfo[]\",\"name\":\"bridgeWithdrawInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyReportL2[]\",\"name\":\"strategyReportL2\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeInteractionInfo[]\",\"name\":\"bridgeDepositInfo\",\"type\":\"tuple[]\"}],\"name\":\"hashFromReportL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2PoolingManager\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethWrapped\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2PoolingManager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequestsExecuted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1Nav\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRequestsExecutedCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"registerStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2PoolingManager\",\"type\":\"uint256\"}],\"name\":\"setPoolingManager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetMessaging\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint256,address,address,address,address)\":{\"params\":{\"_l2PoolingManager\":\"troveManager address\",\"_relayer\":\"relayer address\",\"_starknetCore\":\"starknetCore address\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,uint256,address,address,address,address)\":{\"notice\":\"Initialier the contract state.\"},\"starknetCore()\":{\"notice\":\"Starknet messaging interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolingManager.sol\":\"PoolingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/PoolingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ErrorLib} from \\\"./lib/ErrorLib.sol\\\";\\nimport {Messaging} from \\\"./lib/Messaging.sol\\\";\\nimport \\\"./interfaces/IPoolingManager.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {IStrategyBase} from \\\"./interfaces/IStrategyBase.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract PoolingManager is\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    Messaging\\n{\\n    uint256 public l2PoolingManager;\\n    mapping(address => StrategyInfo) public strategyInfo;\\n    uint256 public batchCounter;\\n    address public ethBridge;\\n    address public ethWrapped;\\n    StrategyReportL2[] public pendingRequests;\\n    StrategyReportL1[] public pendingRequestsExecuted;\\n    uint256 public pendingRequestsExecutedCounter;\\n\\n    event PendingRequestsExecuted(uint256[] indices);\\n    event MessageResentToL2();\\n    event BridgeCancelDepositRequestClaimedAndDeposited(address l1BridgeAddress, uint256 amount, uint256 nonce);\\n    event CancelDepositRequestBridgeSent(address l1BridgeAddress, uint256 amount, uint256 nonce);\\n    event ReportHandled(uint256 epoch, uint256 strategyReportL1Length, StrategyReportL1[] strategyReportL1);\\n    event StrategyRegistered(address strategy, StrategyInfo strategyInfo);\\n\\n    uint256 public constant L2_HANDLER_SELECTOR = 0x10e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff;\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"0x01\\\");\\n\\n    /**\\n     * @dev Receive Ether function\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function\\n     */\\n    fallback() external payable {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Initialier the contract state.\\n    /// @param _l2PoolingManager troveManager address\\n    /// @param _starknetCore starknetCore address\\n    /// @param _relayer relayer address\\n    function initialize(\\n        address _owner,\\n        uint256 _l2PoolingManager,\\n        address _starknetCore,\\n        address _relayer,\\n        address _ethBridge,\\n        address _ethWrapped\\n    ) public initializer {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        initializeMessaging(_starknetCore);\\n        l2PoolingManager = _l2PoolingManager;\\n        _grantRole(0, _owner);\\n        _grantRole(RELAYER_ROLE, _owner);\\n        _grantRole(RELAYER_ROLE, _relayer);\\n        ethBridge = _ethBridge;\\n        ethWrapped = _ethWrapped;\\n    }\\n\\n    function hashFromReportL2(\\n        uint256 epoch,\\n        BridgeInteractionInfo[] memory bridgeWithdrawInfo,\\n        StrategyReportL2[] memory strategyReportL2,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo\\n    ) public pure returns (uint256) {\\n        bytes memory encodedData = abi.encodePacked(epoch);\\n\\n        for (uint i = 0; i < bridgeWithdrawInfo.length; i++) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(bridgeWithdrawInfo[i].bridge)),\\n                bridgeWithdrawInfo[i].amount\\n            );\\n        }\\n\\n        for (uint i = 0; i < strategyReportL2.length; i++) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(strategyReportL2[i].l1Strategy)),\\n                strategyReportL2[i].actionId,\\n                strategyReportL2[i].amount\\n            );\\n        }\\n\\n        for (uint i = 0; i < bridgeDepositInfo.length; i++) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(bridgeDepositInfo[i].bridge)),\\n                bridgeDepositInfo[i].amount\\n            );\\n        }\\n\\n        uint256 hashValue = uint256(keccak256(encodedData));\\n        return hashValue;\\n    }\\n\\n    function hashFromReportL1(\\n        uint256 strategyReportL1Length,\\n        StrategyReportL1[] memory strategyReportL1\\n    ) public pure returns (uint256) {\\n        bytes memory encodedData = abi.encodePacked();\\n        for (uint i = 0; i < strategyReportL1Length; i++) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(strategyReportL1[i].l1Strategy)),\\n                strategyReportL1[i].l1Nav,\\n                strategyReportL1[i].amount\\n            );\\n        }\\n\\n        uint256 strategyReportL1Hash = uint256(keccak256(encodedData));\\n        return strategyReportL1Hash;\\n    }\\n\\n    function bridgeEthFeesMultiplicator(\\n        BridgeInteractionInfo[] memory bridgeDepositInfo\\n    ) public view returns (uint256) {\\n        uint256 acc = 0;\\n        for (uint256 index1 = 0; index1 < pendingRequestsExecuted.length; index1++) {\\n            StrategyReportL1 memory pendingRequestsExecutedElem = pendingRequestsExecuted[index1];\\n            if (pendingRequestsExecutedElem.amount > 0) {\\n                bool found = false;\\n                for (uint256 index2 = 0; index2 < bridgeDepositInfo.length; index2++) {\\n                    BridgeInteractionInfo memory bridgeDepositInfoElem = bridgeDepositInfo[index2];\\n                    if (bridgeDepositInfoElem.bridge == strategyInfo[pendingRequestsExecutedElem.l1Strategy].bridge) {\\n                        found = true;\\n                    }\\n                }\\n                if (!found) {\\n                    acc++;\\n                }\\n            }\\n        }\\n        return (bridgeDepositInfo.length + acc);\\n    }\\n\\n    function registerStrategy(address _strategy, address _underlying, address _bridge) public payable onlyRole(0) {\\n        if (_underlying == address(0)) revert ErrorLib.ZeroAddress();\\n        if (_bridge == address(0)) revert ErrorLib.ZeroAddress();\\n        if (_strategy == address(0)) revert ErrorLib.ZeroAddress();\\n\\n        if (IStrategyBase(_strategy).poolingManager() != address(this)) revert ErrorLib.InvalidPoolingManager();\\n\\n        StrategyInfo memory newStrategyInfo = StrategyInfo({underlying: _underlying, bridge: _bridge});\\n        strategyInfo[_strategy] = newStrategyInfo;\\n\\n        IERC20(_underlying).approve(_bridge, type(uint256).max);\\n        emit StrategyRegistered(_strategy, newStrategyInfo);\\n    }\\n\\n    function setPoolingManager(uint256 _l2PoolingManager) public payable onlyRole(0) {\\n        if (_l2PoolingManager == (0)) revert ErrorLib.ZeroAddress();\\n        l2PoolingManager = _l2PoolingManager;\\n    }\\n\\n    function cancelDepositRequestBridge(address l1BridgeAddress, uint256 amount, uint256 nonce) public onlyRole(0) {\\n        depositCancelRequestToBridgeToken(l1BridgeAddress, l2PoolingManager, amount, nonce);\\n        emit CancelDepositRequestBridgeSent(l1BridgeAddress, amount, nonce);\\n    }\\n\\n    function claimBridgeCancelDepositRequestAndDeposit(\\n        address l1BridgeAddress,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 l2BridgeEthFee\\n    ) public payable onlyRole(0) {\\n        depositReclaimToBridgeToken(l1BridgeAddress, l2PoolingManager, amount, nonce);\\n        BridgeInteractionInfo[] memory bridgeElemArray = new BridgeInteractionInfo[](1);\\n        bridgeElemArray[0] = BridgeInteractionInfo({bridge: l1BridgeAddress, amount: amount});\\n        depositToBridges(bridgeElemArray, l2BridgeEthFee, false);\\n        emit BridgeCancelDepositRequestClaimedAndDeposited(l1BridgeAddress, amount, nonce);\\n    }\\n\\n    function pause() external onlyRole(RELAYER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(0) {\\n        _unpause();\\n    }\\n\\n    function executePendingRequests() public onlyRole(RELAYER_ROLE) {\\n        uint256[] memory indicesToDelete = new uint256[](pendingRequests.length);\\n        uint256 indicesToDeleteLength = 0;\\n        for (uint256 index = 0; index < pendingRequests.length; index++) {\\n            StrategyReportL2 memory currentReport = pendingRequests[index];\\n            try\\n                IStrategyBase(currentReport.l1Strategy).handleReport(currentReport.actionId, currentReport.amount)\\n            returns (uint256 l1Nav, uint256 amount) {\\n                indicesToDelete[indicesToDeleteLength] = index;\\n                indicesToDeleteLength++;\\n                pendingRequestsExecuted.push(\\n                    StrategyReportL1({l1Strategy: currentReport.l1Strategy, l1Nav: l1Nav, amount: amount})\\n                );\\n            } catch {}\\n        }\\n\\n        for (uint256 i = indicesToDeleteLength; i > 0; i--) {\\n            deleteElement(pendingRequests, indicesToDelete[i - 1]);\\n        }\\n        emit PendingRequestsExecuted(indicesToDelete);\\n    }\\n\\n    function handleReport(\\n        uint256 epoch,\\n        BridgeInteractionInfo[] memory bridgeWithdrawInfo,\\n        StrategyReportL2[] memory strategyReportL2,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo,\\n        uint256 l2BridgeEthFee,\\n        uint256 l2MessagingEthFee,\\n        uint256 minSuccessCall\\n    ) public payable onlyRole(RELAYER_ROLE) whenNotPaused {\\n        verifyCallData(epoch, bridgeWithdrawInfo, strategyReportL2, bridgeDepositInfo);\\n        withdrawFromBridges(bridgeWithdrawInfo);\\n        (\\n            uint256 strategyReportL1Length,\\n            StrategyReportL1[] memory strategyReportL1,\\n            BridgeInteractionInfo[] memory newBridgeDepositInfo\\n        ) = handleMassReport(strategyReportL2, bridgeDepositInfo);\\n\\n        if (strategyReportL1Length == 0) revert ErrorLib.NoL1Report();\\n        if (minSuccessCall > strategyReportL1Length) revert ErrorLib.NotEnoughSuccessCalls();\\n\\n        depositToBridges(newBridgeDepositInfo, l2BridgeEthFee, true);\\n\\n        uint256 strategyReportL1Hash = hashFromReportL1(strategyReportL1Length, strategyReportL1);\\n        uint256[] memory data = getMessagePayloadData(epoch, strategyReportL1Hash);\\n\\n        _sendMessageToL2(l2PoolingManager, L2_HANDLER_SELECTOR, data, l2MessagingEthFee);\\n\\n        emit ReportHandled(epoch, strategyReportL1Length, strategyReportL1);\\n    }\\n\\n    function getMessagePayloadData(\\n        uint256 epoch,\\n        uint256 strategyReportL1Hash\\n    ) internal pure returns (uint256[] memory) {\\n        (uint256 lowEpoch, uint256 highEpoch) = u256(epoch);\\n        (uint256 lowStrategyReportL1Hash, uint256 highStrategyReportL1Hash) = u256(strategyReportL1Hash);\\n\\n        uint256[] memory data = new uint256[](4);\\n        data[0] = lowEpoch;\\n        data[1] = highEpoch;\\n        data[2] = lowStrategyReportL1Hash;\\n        data[3] = highStrategyReportL1Hash;\\n        return (data);\\n    }\\n\\n    function deleteElement(StrategyReportL2[] storage array, uint256 index) internal {\\n        require(index < array.length, \\\"Index out of bounds\\\");\\n        array[index] = array[array.length - 1];\\n        array.pop();\\n    }\\n\\n    function verifyCallData(\\n        uint256 epoch,\\n        BridgeInteractionInfo[] memory bridgeWithdrawInfo,\\n        StrategyReportL2[] memory strategyReportL2,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo\\n    ) internal {\\n        uint256 hash_from_calldata = hashFromReportL2(epoch, bridgeWithdrawInfo, strategyReportL2, bridgeDepositInfo);\\n        (uint256 lowHash, uint256 highHash) = u256(hash_from_calldata);\\n        uint256[] memory data = new uint256[](2);\\n        data[0] = lowHash;\\n        data[1] = highHash;\\n        _consumeL2Message(l2PoolingManager, data);\\n    }\\n\\n    function withdrawFromBridges(BridgeInteractionInfo[] memory bridgeWithdrawalInfo) internal {\\n        for (uint256 index = 0; index < bridgeWithdrawalInfo.length; index++) {\\n            _withdrawTokenFromBridge(\\n                bridgeWithdrawalInfo[index].bridge,\\n                address(this),\\n                bridgeWithdrawalInfo[index].amount\\n            );\\n            if (bridgeWithdrawalInfo[index].bridge == ethBridge) {\\n                IWETH(ethWrapped).deposit{value: bridgeWithdrawalInfo[index].amount}();\\n            }\\n        }\\n    }\\n\\n    function depositToBridges(\\n        BridgeInteractionInfo[] memory bridgeDepositInfo,\\n        uint256 l2BridgeEthFee,\\n        bool withdrawEth\\n    ) internal {\\n        for (uint256 index = 0; index < bridgeDepositInfo.length; index++) {\\n            BridgeInteractionInfo memory bridgeInteractionInfoElem = bridgeDepositInfo[index];\\n            if (bridgeInteractionInfoElem.bridge == ethBridge) {\\n                if (withdrawEth) {\\n                    IWETH(ethWrapped).withdraw(bridgeInteractionInfoElem.amount);\\n                }\\n                depositToBridgeToken(\\n                    bridgeInteractionInfoElem.bridge,\\n                    l2PoolingManager,\\n                    bridgeInteractionInfoElem.amount,\\n                    bridgeInteractionInfoElem.amount + l2BridgeEthFee\\n                );\\n            } else {\\n                depositToBridgeToken(\\n                    bridgeInteractionInfoElem.bridge,\\n                    l2PoolingManager,\\n                    bridgeInteractionInfoElem.amount,\\n                    l2BridgeEthFee\\n                );\\n            }\\n        }\\n    }\\n\\n    function handleMassReport(\\n        StrategyReportL2[] memory strategyReportL2,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo\\n    ) internal returns (uint256, StrategyReportL1[] memory, BridgeInteractionInfo[] memory) {\\n        (\\n            uint256 strategyReportL1Length,\\n            StrategyReportL1[] memory strategyReportL1,\\n            uint256 tempBridgeLossLength,\\n            BridgeInteractionInfo[] memory tempBridgeLoss\\n        ) = processStrategyReports(strategyReportL2);\\n\\n        updateBridgeDepositInfo(tempBridgeLossLength, tempBridgeLoss, bridgeDepositInfo);\\n\\n        uint256 pendingRequestsExecutedLength = pendingRequestsExecuted.length - pendingRequestsExecutedCounter;\\n\\n        if (pendingRequestsExecutedLength > 0) {\\n            return\\n                processPendingRequests(\\n                    strategyReportL1Length,\\n                    strategyReportL1,\\n                    bridgeDepositInfo,\\n                    pendingRequestsExecutedLength\\n                );\\n        } else {\\n            return (strategyReportL1Length, strategyReportL1, bridgeDepositInfo);\\n        }\\n    }\\n\\n    function processStrategyReports(\\n        StrategyReportL2[] memory strategyReportL2\\n    )\\n        internal\\n        returns (\\n            uint256 strategyReportL1Length,\\n            StrategyReportL1[] memory strategyReportL1,\\n            uint256 tempBridgeLossLength,\\n            BridgeInteractionInfo[] memory tempBridgeLoss\\n        )\\n    {\\n        strategyReportL1 = new StrategyReportL1[](strategyReportL2.length);\\n        tempBridgeLoss = new BridgeInteractionInfo[](strategyReportL2.length + pendingRequestsExecuted.length);\\n\\n        for (uint256 i = 0; i < strategyReportL2.length; i++) {\\n            StrategyReportL2 memory currentReport = strategyReportL2[i];\\n            StrategyInfo memory currentStrategyInfo = strategyInfo[currentReport.l1Strategy];\\n\\n            if (currentReport.actionId == 0) {\\n                IERC20(currentStrategyInfo.underlying).transfer(currentReport.l1Strategy, currentReport.amount);\\n            }\\n\\n            try\\n                IStrategyBase(currentReport.l1Strategy).handleReport(currentReport.actionId, currentReport.amount)\\n            returns (uint256 l1Nav, uint256 amount) {\\n                strategyReportL1[strategyReportL1Length] = StrategyReportL1({\\n                    l1Strategy: currentReport.l1Strategy,\\n                    l1Nav: l1Nav,\\n                    amount: amount\\n                });\\n                if (currentReport.actionId == 2 && amount != currentReport.amount) {\\n                    tempBridgeLoss[tempBridgeLossLength] = BridgeInteractionInfo({\\n                        bridge: currentStrategyInfo.bridge,\\n                        amount: currentReport.amount - amount\\n                    });\\n                    tempBridgeLossLength++;\\n                }\\n                strategyReportL1Length++;\\n            } catch {\\n                pendingRequests.push(currentReport);\\n                tempBridgeLoss[tempBridgeLossLength] = BridgeInteractionInfo({\\n                    bridge: currentStrategyInfo.bridge,\\n                    amount: currentReport.amount\\n                });\\n                tempBridgeLossLength++;\\n            }\\n        }\\n\\n        return (strategyReportL1Length, strategyReportL1, tempBridgeLossLength, tempBridgeLoss);\\n    }\\n\\n    function processPendingRequests(\\n        uint256 strategyReportL1Length,\\n        StrategyReportL1[] memory strategyReportL1,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo,\\n        uint256 pendingRequestsExecutedLength\\n    ) internal returns (uint256, StrategyReportL1[] memory, BridgeInteractionInfo[] memory) {\\n        (\\n            uint256 newStrategyReportL1Length,\\n            StrategyReportL1[] memory newStrategyReportL1,\\n            uint256 tempBridgeAdditionalDepositLength,\\n            BridgeInteractionInfo[] memory tempBridgeAdditionalDeposit\\n        ) = mergeReportsAndUpdateDeposits(\\n                strategyReportL1Length,\\n                strategyReportL1,\\n                bridgeDepositInfo,\\n                pendingRequestsExecutedLength\\n            );\\n\\n        pendingRequestsExecutedCounter = pendingRequestsExecuted.length;\\n\\n        if (tempBridgeAdditionalDepositLength > 0) {\\n            uint256 totalLen = tempBridgeAdditionalDepositLength + bridgeDepositInfo.length;\\n\\n            BridgeInteractionInfo[] memory newBridgeDepositInfo = new BridgeInteractionInfo[](totalLen);\\n\\n            for (uint256 i = 0; i < totalLen; i++) {\\n                if (i < bridgeDepositInfo.length) {\\n                    newBridgeDepositInfo[i] = bridgeDepositInfo[i];\\n                } else {\\n                    newBridgeDepositInfo[i] = tempBridgeAdditionalDeposit[i - bridgeDepositInfo.length];\\n                }\\n            }\\n            return (newStrategyReportL1Length, newStrategyReportL1, newBridgeDepositInfo);\\n        } else {\\n            return (newStrategyReportL1Length, newStrategyReportL1, bridgeDepositInfo);\\n        }\\n    }\\n\\n    function mergeReportsAndUpdateDeposits(\\n        uint256 strategyReportL1Length,\\n        StrategyReportL1[] memory strategyReportL1,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo,\\n        uint256 pendingRequestsExecutedLength\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 newStrategyReportL1Length,\\n            StrategyReportL1[] memory newStrategyReportL1,\\n            uint256 tempBridgeAdditionalDepositLength,\\n            BridgeInteractionInfo[] memory tempBridgeAdditionalDeposit\\n        )\\n    {\\n        newStrategyReportL1Length = strategyReportL1Length + pendingRequestsExecutedLength;\\n        newStrategyReportL1 = new StrategyReportL1[](newStrategyReportL1Length);\\n        tempBridgeAdditionalDeposit = new BridgeInteractionInfo[](pendingRequestsExecutedLength);\\n\\n        for (uint256 i = 0; i < newStrategyReportL1Length; i++) {\\n            if (i < strategyReportL1Length) {\\n                newStrategyReportL1[i] = strategyReportL1[i];\\n            } else {\\n                tempBridgeAdditionalDepositLength = processPendingRequest(\\n                    i,\\n                    strategyReportL1Length,\\n                    newStrategyReportL1,\\n                    bridgeDepositInfo,\\n                    tempBridgeAdditionalDeposit,\\n                    tempBridgeAdditionalDepositLength\\n                );\\n            }\\n        }\\n\\n        return (\\n            newStrategyReportL1Length,\\n            newStrategyReportL1,\\n            tempBridgeAdditionalDepositLength,\\n            tempBridgeAdditionalDeposit\\n        );\\n    }\\n\\n    function processPendingRequest(\\n        uint256 i,\\n        uint256 strategyReportL1Length,\\n        StrategyReportL1[] memory newStrategyReportL1,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo,\\n        BridgeInteractionInfo[] memory tempBridgeAdditionalDeposit,\\n        uint256 tempBridgeAdditionalDepositLength\\n    ) internal view returns (uint256) {\\n        uint256 indexCounter = i - strategyReportL1Length;\\n        StrategyReportL1 memory pendingRequestExecutedElem = pendingRequestsExecuted[indexCounter];\\n        newStrategyReportL1[i] = pendingRequestExecutedElem;\\n\\n        if (pendingRequestExecutedElem.amount > 0) {\\n            StrategyInfo memory currentStrategyInfo = strategyInfo[pendingRequestExecutedElem.l1Strategy];\\n            bool found = false;\\n            for (uint256 index = 0; index < bridgeDepositInfo.length; index++) {\\n                if (bridgeDepositInfo[index].bridge == currentStrategyInfo.bridge) {\\n                    bridgeDepositInfo[index].amount += pendingRequestExecutedElem.amount;\\n                    found = true;\\n                    break;\\n                }\\n            }\\n            if (!found) {\\n                tempBridgeAdditionalDeposit[tempBridgeAdditionalDepositLength] = BridgeInteractionInfo({\\n                    bridge: currentStrategyInfo.bridge,\\n                    amount: pendingRequestExecutedElem.amount\\n                });\\n                tempBridgeAdditionalDepositLength++;\\n            }\\n        }\\n\\n        return tempBridgeAdditionalDepositLength;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(0) {}\\n\\n    function updateBridgeDepositInfo(\\n        uint256 tempBridgeLossLength,\\n        BridgeInteractionInfo[] memory tempBridgeLoss,\\n        BridgeInteractionInfo[] memory bridgeDepositInfo\\n    ) internal pure {\\n        for (uint256 index1 = 0; index1 < tempBridgeLossLength; index1++) {\\n            BridgeInteractionInfo memory tempBridgeLossElem = tempBridgeLoss[index1];\\n            for (uint256 index2 = 0; index2 < bridgeDepositInfo.length; index2++) {\\n                if (tempBridgeLossElem.bridge == bridgeDepositInfo[index2].bridge) {\\n                    bridgeDepositInfo[index2].amount -= tempBridgeLossElem.amount;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf81cf33ca85c217b38c0e1067cabce1fff756e5c535d6ff79fabd290e932d66\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPoolingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nstruct StrategyInfo {\\n    address underlying;\\n    address bridge;\\n}\\n\\nstruct BridgeInteractionInfo {\\n    address bridge;\\n    uint256 amount;\\n}\\n\\nstruct StrategyReportL2 {\\n    address l1Strategy;\\n    uint256 actionId;\\n    uint256 amount;\\n}\\n\\nstruct StrategyReportL1 {\\n    address l1Strategy;\\n    uint256 l1Nav;\\n    uint256 amount;\\n}\\n\\ninterface IPoolingManager {\\n    // Events\\n    event PendingRequestsExecuted(uint256[] indices);\\n    event MessageResentToL2();\\n    event BridgeCancelDepositRequestClaimedAndDeposited(address l1BridgeAddress, uint256 amount, uint256 nonce);\\n    event CancelDepositRequestBridgeSent(address l1BridgeAddress, uint256 amount, uint256 nonce);\\n    event ReportHandled(uint256 epoch, StrategyReportL1[] strategyReportL1);\\n    event StrategyRegistered(address strategy, StrategyInfo strategyInfo);\\n\\n    // Functions\\n    function initialize(address _owner, uint256 _l2PoolingManager, address _starknetCore, address _relayer) external;\\n\\n    function hashFromCalldata(\\n        BridgeInteractionInfo[] calldata bridgeWithdrawInfo,\\n        StrategyReportL2[] calldata strategyReportL2,\\n        BridgeInteractionInfo[] calldata bridgeDepositInfo\\n    ) external pure returns (uint256);\\n\\n    function hashFromReportL1(\\n        uint256 epoch,\\n        StrategyReportL1[] calldata strategyReportL1\\n    ) external pure returns (uint256);\\n\\n    function bridgeEthFeesMultiplicator(\\n        BridgeInteractionInfo[] calldata bridgeDepositInfo\\n    ) external view returns (uint256);\\n\\n    function registerStrategy(address _strategy, address _underlying, address _bridge) external payable;\\n\\n    function resendMessageToL2() external payable returns (uint256);\\n\\n    function cancelDepositRequestBridge(\\n        address l1BridgeAddress,\\n        uint256 amount,\\n        uint256 nonce\\n    ) external returns (uint256);\\n\\n    function claimBridgeCancelDepositRequestAndDeposit(\\n        address l1BridgeAddress,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 l2BridgeEthFee\\n    ) external payable;\\n\\n    function executePendingRequests() external;\\n\\n    function handleReport(\\n        BridgeInteractionInfo[] calldata bridgeWithdrawInfo,\\n        StrategyReportL2[] calldata strategyReportL2,\\n        BridgeInteractionInfo[] calldata bridgeDepositInfo,\\n        uint256 l2BridgeEthFee,\\n        uint256 l2MessagingEthFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb19126bf9e15e692b11168f690eb762f2c4c360cdabda83a31cf1db6c6931442\",\"license\":\"MIT\"},\"contracts/interfaces/IStarknetBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IStarknetBridge {\\n    function deposit(uint256 amount, uint256 l2Recipient) external payable;\\n\\n    function withdraw(uint256 amount, address recipient) external;\\n\\n    function depositCancelRequest(uint256 amount, uint256 l2Recipient, uint256 nonce) external;\\n\\n    function depositReclaim(uint256 amount, uint256 l2Recipient, uint256 nonce) external;\\n}\\n\",\"keccak256\":\"0x4a5f720ccd010bcd6e0a437d0b42850ea730b11a400e40cbfe3d20a9d8029aaf\",\"license\":\"MIT\"},\"contracts/interfaces/IStarknetMessaging.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IStarknetMessaging {\\n    /// @notice Consumes a message that was sent from an L2 contract. Returns the hash of the message.\\n    function consumeMessageFromL2(uint256 fromAddress, uint256[] calldata payload) external returns (bytes32);\\n\\n    /// @notice Execute a function call on L2\\n    function sendMessageToL2(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external payable returns (bytes32, uint256);\\n\\n    function l2ToL1Messages(bytes32 msgHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd119eb86ed3a08c87afa149b8cb1fc72fb6b0f3498f77018c5cb8d995eeef14c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nuint256 constant DEPOSIT = 0;\\nuint256 constant REPORT = 1;\\nuint256 constant WITHDRAW = 2;\\n\\ninterface IStrategyBase {\\n    function initializeStrategyBase(address _l2PoolingManager, address _underlyingToken, address _yieldToken) external;\\n\\n    function handleReport(uint256 actionId, uint256 amount) external payable returns (uint256, uint256);\\n\\n    function nav() external view returns (uint256);\\n\\n    function yieldToUnderlying(uint256 amount) external view returns (uint256);\\n\\n    function underlyingToYield(uint256 amount) external view returns (uint256);\\n\\n    function yieldBalance() external view returns (uint256);\\n\\n    function poolingManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa46cfe69e08d4f1a38333ed7702027b500c4c861dec35d0af45fda9613be2fa0\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x44e0330e54186eef263c19ef9f5f67c258116322ef2aba5343ceec96675a1ba0\",\"license\":\"MIT\"},\"contracts/lib/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.8.20;\\n\\nlibrary ErrorLib {\\n    error NotRelayer();\\n    error UnknownUnderlying();\\n    error ZeroAddress();\\n    error InvalidEthAmount();\\n    error InvalidCaller();\\n    error UnknownActionId();\\n    error InvalidSlippage();\\n    error InvalidDecimals();\\n    error InvalidPoolingManager();\\n    error NoL1Report();\\n    error NotEnoughSuccessCalls();\\n}\\n\",\"keccak256\":\"0x5819012fb2cf29e99dc133113b18fe13236fb534718b2559e9b54817ba0e9d4b\",\"license\":\"Apache-2.0.\"},\"contracts/lib/Messaging.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IStarknetMessaging} from \\\"../interfaces/IStarknetMessaging.sol\\\";\\nimport {IStarknetBridge} from \\\"../interfaces/IStarknetBridge.sol\\\";\\n\\n/// @title Messaging contract.\\n/// @author Spaceshard team 2023.\\ncontract Messaging {\\n    uint256 private constant UINT256_PART_SIZE_BITS = 128;\\n    uint256 private constant UINT256_PART_SIZE = 2 ** UINT256_PART_SIZE_BITS;\\n\\n    /// @notice Starknet messaging interface.\\n    IStarknetMessaging public starknetCore;\\n\\n    /// @notice initialize the trove handler.\\n    /// @param _starknetCore Starknet core interface.\\n    function initializeMessaging(address _starknetCore) internal {\\n        starknetCore = IStarknetMessaging(_starknetCore);\\n    }\\n\\n    /// @notice Consume l2 message.\\n    function _consumeL2Message(uint256 l2ContractAddress, uint256[] memory data) internal {\\n        starknetCore.consumeMessageFromL2(l2ContractAddress, data);\\n    }\\n\\n    /// @notice Withdraw tokens from Starkgate bridge.\\n    function _withdrawTokenFromBridge(address l1BridgeAddress, address _receiver, uint256 _amount) internal {\\n        IStarknetBridge(l1BridgeAddress).withdraw(_amount, _receiver);\\n    }\\n\\n    /// @notice deposit tokens to Starknet bridge.\\n    function depositToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _value\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).deposit{value: _value}(_amount, _l2Receiver);\\n        }\\n    }\\n\\n    /// @notice cancel deposit tokens to Starknet bridge.\\n    function depositCancelRequestToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).depositCancelRequest(_amount, _l2Receiver, _nonce);\\n        }\\n    }\\n\\n    /// @notice cancel deposit tokens to Starknet bridge.\\n    function depositReclaimToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).depositReclaim(_amount, _l2Receiver, _nonce);\\n        }\\n    }\\n\\n    /// @notice send message to l2.\\n    function _sendMessageToL2(\\n        uint256 _l2Contract,\\n        uint256 _selector,\\n        uint256[] memory payload,\\n        uint256 _value\\n    ) internal {\\n        starknetCore.sendMessageToL2{value: _value}(_l2Contract, _selector, payload);\\n    }\\n\\n    function u256(uint256 _value) internal pure returns (uint256 low, uint256 high) {\\n        low = _value & (UINT256_PART_SIZE - 1);\\n        high = _value >> UINT256_PART_SIZE_BITS;\\n    }\\n}\\n\",\"keccak256\":\"0x01729269f10380030ccfe00498b351cda393f7783d7262f21ef4ec47dcb2fd51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b0316600081158015620000615750825b90506000826001600160401b031660011480156200007e5750303b155b9050811580156200008d575080155b15620000ac5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000db57845460ff60401b1916680100000000000000001785555b83156200012257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050608051613809620001516000396000818161180e01528181611837015261197d01526138096000f3fe6080604052600436106101e55760003560e01c80635c975abb116101015780639521005b1161009a578063ad3cb1cc1161006c578063ad3cb1cc14610580578063b7565cec146105be578063c2858ab81461061f578063d547741f1461063f578063ff15665f1461065f57005b80639521005b14610525578063959ec9bb14610538578063a217fddf1461054b578063a2dc2ab71461056057005b80638456cb59116100d35780638456cb59146104ae5780638f3281a4146104c357806391d14854146104e3578063926d7d7f1461050357005b80635c975abb1461043d57806368233eef146104625780636e9cfef1146104785780638201801a1461048e57005b806336568abe1161017e5780633f4ba83a116101505780633f4ba83a146103cd5780633fe6d7ed146103e25780634f1ef2861461040257806352d1902d1461041557806353f709f41461042a57005b806336568abe1461033957806339e730ab146103595780633c652a9a146103795780633ea387731461039957005b80632e8a3eaa116101b75780632e8a3eaa146102a95780632f2ff15d146102bf5780633437f685146102df578063350ae0161461032457005b806301ffc9a7146101ee57806316d6a67f14610223578063248a9ca314610251578063252111c61461027157005b366101ec57005b005b3480156101fa57600080fd5b5061020e610209366004612d4e565b610672565b60405190151581526020015b60405180910390f35b34801561022f57600080fd5b5061024361023e366004612ec7565b6106a9565b60405190815260200161021a565b34801561025d57600080fd5b5061024361026c366004612f21565b61076e565b34801561027d57600080fd5b50600554610291906001600160a01b031681565b6040516001600160a01b03909116815260200161021a565b3480156102b557600080fd5b5061024360085481565b3480156102cb57600080fd5b506101ec6102da366004612f3a565b610790565b3480156102eb57600080fd5b506102ff6102fa366004612f21565b6107b2565b604080516001600160a01b03909416845260208401929092529082015260600161021a565b34801561033057600080fd5b506101ec6107ef565b34801561034557600080fd5b506101ec610354366004612f3a565b610aaa565b34801561036557600080fd5b50600054610291906001600160a01b031681565b34801561038557600080fd5b506102ff610394366004612f21565b610ae2565b3480156103a557600080fd5b506102437f010e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff81565b3480156103d957600080fd5b506101ec610af2565b3480156103ee57600080fd5b506102436103fd366004612ffd565b610b08565b6101ec610410366004613039565b610c26565b34801561042157600080fd5b50610243610c45565b6101ec610438366004612f21565b610c62565b34801561044957600080fd5b506000805160206137b48339815191525460ff1661020e565b34801561046e57600080fd5b5061024360035481565b34801561048457600080fd5b5061024360015481565b34801561049a57600080fd5b506101ec6104a93660046130e0565b610c94565b3480156104ba57600080fd5b506101ec610cfd565b3480156104cf57600080fd5b50600454610291906001600160a01b031681565b3480156104ef57600080fd5b5061020e6104fe366004612f3a565b610d1d565b34801561050f57600080fd5b5061024360008051602061377483398151915281565b6101ec610533366004613115565b610d55565b6101ec610546366004613160565b610f89565b34801561055757600080fd5b50610243600081565b34801561056c57600080fd5b506101ec61057b36600461319b565b61107c565b34801561058c57600080fd5b506105b1604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161021a9190613238565b3480156105ca57600080fd5b506105ff6105d936600461326b565b600260205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520161021a565b34801561062b57600080fd5b5061024361063a3660046132a8565b61122c565b34801561064b57600080fd5b506101ec61065a366004612f3a565b61141e565b6101ec61066d366004613339565b61143a565b60006001600160e01b03198216637965db0b60e01b14806106a357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60408051600080825260208201909252815b8481101561075e57818482815181106106d6576106d66133e5565b6020026020010151600001516001600160a01b03168583815181106106fd576106fd6133e5565b60200260200101516020015186848151811061071b5761071b6133e5565b60200260200101516040015160405160200161073a94939291906133fb565b6040516020818303038152906040529150808061075690613440565b9150506106bb565b5080516020909101209392505050565b6000908152600080516020613794833981519152602052604090206001015490565b6107998261076e565b6107a281611566565b6107ac8383611570565b50505050565b600781815481106107c257600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b60008051602061377483398151915261080781611566565b6006546000906001600160401b0381111561082457610824612d78565b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b5090506000805b600654811015610a2457600060068281548110610873576108736133e5565b600091825260209182902060408051606081018252600390930290910180546001600160a01b031680845260018201549484018590526002909101548383018190529151632747a90b60e21b815292945092639d1ea42c926108e19290600401918252602082015260400190565b60408051808303816000875af192505050801561091b575060408051601f3d908101601f1916820190925261091891810190613459565b60015b15610a115783868681518110610933576109336133e5565b60209081029190910101528461094881613440565b6040805160608101825286516001600160a01b039081168252602082019687529181019485526007805460018101825560009190915290517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600390920291820180546001600160a01b031916919093161790915593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68985015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a909301929092559350505b5080610a1c81613440565b915050610854565b50805b8015610a6d57610a5b600684610a3e60018561347d565b81518110610a4e57610a4e6133e5565b6020026020010151611615565b80610a6581613490565b915050610a27565b507fe38bcae4e841a921b99257dced11c82ca84c658e2ca31cba31712e1e73bdd67b82604051610a9d91906134e2565b60405180910390a1505050565b6001600160a01b0381163314610ad35760405163334bd91960e11b815260040160405180910390fd5b610add8282611727565b505050565b600681815481106107c257600080fd5b6000610afd81611566565b610b056117a3565b50565b600080805b600754811015610c1157600060078281548110610b2c57610b2c6133e5565b600091825260209182902060408051606081018252600390930290910180546001600160a01b03168352600181015493830193909352600290920154918101829052915015610bfe576000805b8651811015610be8576000878281518110610b9657610b966133e5565b60209081029190910181015185516001600160a01b039081166000908152600290935260409092206001015481519193508216911603610bd557600192505b5080610be081613440565b915050610b79565b5080610bfc5783610bf881613440565b9450505b505b5080610c0981613440565b915050610b0d565b50808351610c1f91906134f5565b9392505050565b610c2e611803565b610c37826118aa565b610c4182826118b5565b5050565b6000610c4f611972565b5060008051602061375483398151915290565b6000610c6d81611566565b81600003610c8e5760405163d92e233d60e01b815260040160405180910390fd5b50600155565b6000610c9f81611566565b610cad8460015485856119bb565b604080516001600160a01b0386168152602081018590529081018390527f6bede034b368efac88a4cd28b60aac75bec57160af2185de376fa635b11feceb9060600160405180910390a150505050565b600080516020613774833981519152610d1581611566565b610b05611a30565b6000918252600080516020613794833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610d6081611566565b6001600160a01b038316610d875760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216610dae5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038416610dd55760405163d92e233d60e01b815260040160405180910390fd5b306001600160a01b0316846001600160a01b031663d7f708036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613508565b6001600160a01b031614610e68576040516369fad3d560e11b815260040160405180910390fd5b6040805180820182526001600160a01b0385811680835285821660208085018281528a85166000908152600290925290869020855181549086166001600160a01b031991821617825591516001909101805491909516911617909255925163095ea7b360e01b81526004810191909152600019602482015290919063095ea7b3906044016020604051808303816000875af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190613525565b50604080516001600160a01b03878116825283518116602080840191909152840151168183015290517f0f2e78c238652ca28995bab07b66395e0cc5a777b1780ce9239668de004d33729181900360600190a15050505050565b6000610f9481611566565b610fa2856001548686611a79565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610fb95790505090506040518060400160405280876001600160a01b031681526020018681525081600081518110611013576110136133e5565b602002602001018190525061102a81846000611aba565b604080516001600160a01b0388168152602081018790529081018590527fa1a4a9be7c1e6aee7eb583f810e42c075a14c3433e72f3667c0a83880baf37c49060600160405180910390a1505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110c15750825b90506000826001600160401b031660011480156110dd5750303b155b9050811580156110eb575080155b156111095760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561113357845460ff60401b1916600160401b1785555b61113b611bbc565b611143611bcc565b61114b611bcc565b600080546001600160a01b0319166001600160a01b038b1617905560018a905561117660008c611570565b5061118f6000805160206137748339815191528c611570565b506111a860008051602061377483398151915289611570565b50600480546001600160a01b03808a166001600160a01b0319928316179092556005805492891692909116919091179055831561121f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000808560405160200161124291815260200190565b604051602081830303815290604052905060005b85518110156112db5781868281518110611272576112726133e5565b6020026020010151600001516001600160a01b0316878381518110611299576112996133e5565b6020026020010151602001516040516020016112b793929190613547565b604051602081830303815290604052915080806112d390613440565b915050611256565b5060005b845181101561138357818582815181106112fb576112fb6133e5565b6020026020010151600001516001600160a01b0316868381518110611322576113226133e5565b602002602001015160200151878481518110611340576113406133e5565b60200260200101516040015160405160200161135f94939291906133fb565b6040516020818303038152906040529150808061137b90613440565b9150506112df565b5060005b835181101561140c57818482815181106113a3576113a36133e5565b6020026020010151600001516001600160a01b03168583815181106113ca576113ca6133e5565b6020026020010151602001516040516020016113e893929190613547565b6040516020818303038152906040529150808061140490613440565b915050611387565b50805160209091012095945050505050565b6114278261076e565b61143081611566565b6107ac8383611727565b60008051602061377483398151915261145281611566565b61145a611bd4565b61146688888888611c05565b61146f87611c95565b600080600061147e8989611daf565b925092509250826000036114a55760405163235e146960e01b815260040160405180910390fd5b828511156114c6576040516302d8ae6560e51b815260040160405180910390fd5b6114d281886001611aba565b60006114de84846106a9565b905060006114ec8d83611e25565b905061151c6001547f010e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff838b611ef7565b7fc68e0510c43808522ad89c060ab20d5fd11453f9cf5d4ed1de9b3355eff2e8488d868660405161154f9392919061356e565b60405180910390a150505050505050505050505050565b610b058133611f77565b600060008051602061379483398151915261158b8484610d1d565b61160b576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556115c13390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106a3565b60009150506106a3565b815481106116605760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064015b60405180910390fd5b815482906116709060019061347d565b81548110611680576116806133e5565b90600052602060002090600302018282815481106116a0576116a06133e5565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b039092169190911781556001808301549082015560029182015491015581548290806116f3576116f36135e0565b60008281526020812060036000199093019283020180546001600160a01b0319168155600181018290556002015590555050565b60006000805160206137948339815191526117428484610d1d565b1561160b576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106a3565b6117ab611fb0565b6000805160206137b4833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061188a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661187e600080516020613754833981519152546001600160a01b031690565b6001600160a01b031614155b156118a85760405163703e46dd60e11b815260040160405180910390fd5b565b6000610c4181611566565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561190f575060408051601f3d908101601f1916820190925261190c918101906135f6565b60015b61193757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611657565b600080516020613754833981519152811461196857604051632a87526960e21b815260048101829052602401611657565b610add8383611fe0565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118a85760405163703e46dd60e11b815260040160405180910390fd5b81156107ac5760405163262b3b3160e11b81526004810183905260248101849052604481018290526001600160a01b03851690634c567662906064015b600060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b5050505050505050565b611a38611bd4565b6000805160206137b4833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336117e5565b81156107ac576040516357439c0b60e11b81526004810183905260248101849052604481018290526001600160a01b0385169063ae873816906064016119f8565b60005b83518110156107ac576000848281518110611ada57611ada6133e5565b602090810291909101015160045481519192506001600160a01b03908116911603611b93578215611b6f576005546020820151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91611b3c9160040190815260200190565b600060405180830381600087803b158015611b5657600080fd5b505af1158015611b6a573d6000803e3d6000fd5b505050505b80516001546020830151611b8e929190611b8988826134f5565b612036565b611ba9565b611ba98160000151600154836020015187612036565b5080611bb481613440565b915050611abd565b611bc46120a5565b6118a86120ee565b6118a86120a5565b6000805160206137b48339815191525460ff16156118a85760405163d93c066560e01b815260040160405180910390fd5b6000611c138585858561122c565b9050600080611c218361210f565b604080516002808252606082018352939550919350600092906020830190803683370190505090508281600081518110611c5d57611c5d6133e5565b6020026020010181815250508181600181518110611c7d57611c7d6133e5565b602002602001018181525050611a2660015482612139565b60005b8151811015610c4157611ce6828281518110611cb657611cb66133e5565b60200260200101516000015130848481518110611cd557611cd56133e5565b6020026020010151602001516121ad565b60045482516001600160a01b0390911690839083908110611d0957611d096133e5565b6020026020010151600001516001600160a01b031603611d9d5760055482516001600160a01b039091169063d0e30db090849084908110611d4c57611d4c6133e5565b6020026020010151602001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d8357600080fd5b505af1158015611d97573d6000803e3d6000fd5b50505050505b80611da781613440565b915050611c98565b6000606080600080600080611dc389612212565b9350935093509350611dd682828a61264b565b600854600754600091611de89161347d565b90508015611e0c57611dfc85858b84612718565b9750975097505050505050611e1e565b50929550909350859250611e1e915050565b9250925092565b6060600080611e338561210f565b91509150600080611e438661210f565b60408051600480825260a0820190925292945090925060009190602082016080803683370190505090508481600081518110611e8157611e816133e5565b6020026020010181815250508381600181518110611ea157611ea16133e5565b6020026020010181815250508281600281518110611ec157611ec16133e5565b6020026020010181815250508181600381518110611ee157611ee16133e5565b6020908102919091010152979650505050505050565b600054604051633e3aa6c560e01b81526001600160a01b0390911690633e3aa6c5908390611f2d9088908890889060040161360f565b604080518083038185885af1158015611f4a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611f6f9190613459565b505050505050565b611f818282610d1d565b610c415760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401611657565b6000805160206137b48339815191525460ff166118a857604051638dfc202b60e01b815260040160405180910390fd5b611fe98261288b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561202e57610add82826128f0565b610c41612966565b81156107ac57604051631c57762b60e31b815260048101839052602481018490526001600160a01b0385169063e2bbb1589083906044016000604051808303818588803b15801561208657600080fd5b505af115801561209a573d6000803e3d6000fd5b505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166118a857604051631afcd79f60e31b815260040160405180910390fd5b6120f66120a5565b6000805160206137b4833981519152805460ff19169055565b600080600161212060806002613712565b61212a919061347d565b83169360809390931c92915050565b60005460405162b2775760e61b81526001600160a01b0390911690632c9dd5c09061216a908590859060040161371e565b6020604051808303816000875af1158015612189573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add91906135f6565b604051627b8a6760e11b8152600481018290526001600160a01b03838116602483015284169062f714ce90604401600060405180830381600087803b1580156121f557600080fd5b505af1158015612209573d6000803e3d6000fd5b50505050505050565b600060606000606084516001600160401b0381111561223357612233612d78565b60405190808252806020026020018201604052801561229157816020015b61227e604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816122515790505b5060075486519194506122a3916134f5565b6001600160401b038111156122ba576122ba612d78565b6040519080825280602002602001820160405280156122ff57816020015b60408051808201909152600080825260208201528152602001906001900390816122d85790505b50905060005b8551811015612643576000868281518110612322576123226133e5565b60209081029190910181015180516001600160a01b039081166000908152600284526040808220815180830190925280548416825260010154909216828501529282015191935091036123ee5780518251604080850151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ec9190613525565b505b815160208301516040808501519051632747a90b60e21b8152600481019290925260248201526001600160a01b0390911690639d1ea42c9060440160408051808303816000875af1925050508015612463575060408051601f3d908101601f1916820190925261246091810190613459565b60015b61255f5760068054600181018255600091909152825160039091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180546001600160a01b039384166001600160a01b03199091161790556020808501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830155604080860180517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d419094019390935580518082019091528482015190931683529051908201528451859087908110612541576125416133e5565b6020026020010181905250848061255790613440565b95505061262e565b604051806060016040528085600001516001600160a01b0316815260200183815260200182815250888a81518110612599576125996133e5565b6020026020010181905250836020015160021480156125bc575083604001518114155b1561261e57604051806040016040528084602001516001600160a01b031681526020018286604001516125ef919061347d565b815250868881518110612604576126046133e5565b6020026020010181905250868061261a90613440565b9750505b8861262881613440565b99505050505b5050808061263b90613440565b915050612305565b509193509193565b60005b838110156107ac57600083828151811061266a5761266a6133e5565b6020026020010151905060005b835181101561270357838181518110612692576126926133e5565b6020026020010151600001516001600160a01b031682600001516001600160a01b0316036126f15781602001518482815181106126d1576126d16133e5565b60200260200101516020018181516126e9919061347d565b905250612703565b806126fb81613440565b915050612677565b5050808061271090613440565b91505061264e565b600060608060008060008061272f8b8b8b8b612985565b60075460085592965090945092509050811561287157600089518361275491906134f5565b90506000816001600160401b0381111561277057612770612d78565b6040519080825280602002602001820160405280156127b557816020015b604080518082019091526000808252602082015281526020019060019003908161278e5790505b50905060005b8281101561285e578b51811015612808578b81815181106127de576127de6133e5565b60200260200101518282815181106127f8576127f86133e5565b602002602001018190525061284c565b838c5182612816919061347d565b81518110612826576128266133e5565b6020026020010151828281518110612840576128406133e5565b60200260200101819052505b8061285681613440565b9150506127bb565b5094975092955092935061288192505050565b5091945092508591506128819050565b9450945094915050565b806001600160a01b03163b6000036128c157604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611657565b60008051602061375483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161290d9190613737565b600060405180830381855af49150503d8060008114612948576040519150601f19603f3d011682016040523d82523d6000602084013e61294d565b606091505b509150915061295d858383612aee565b95945050505050565b34156118a85760405163b398979f60e01b815260040160405180910390fd5b60006060818161299585896134f5565b9350836001600160401b038111156129af576129af612d78565b604051908082528060200260200182016040528015612a0d57816020015b6129fa604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816129cd5790505b509250846001600160401b03811115612a2857612a28612d78565b604051908082528060200260200182016040528015612a6d57816020015b6040805180820190915260008082526020820152815260200190600190039081612a465790505b50905060005b84811015612ae25788811015612abf57878181518110612a9557612a956133e5565b6020026020010151848281518110612aaf57612aaf6133e5565b6020026020010181905250612ad0565b612acd818a868a8688612b4a565b92505b80612ada81613440565b915050612a73565b50945094509450949050565b606082612b0357612afe82612d25565b610c1f565b8151158015612b1a57506001600160a01b0384163b155b15612b4357604051639996b31560e01b81526001600160a01b0385166004820152602401611657565b5092915050565b600080612b57878961347d565b9050600060078281548110612b6e57612b6e6133e5565b90600052602060002090600302016040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481525050905080878a81518110612bdf57612bdf6133e5565b6020908102919091010152604081015115612d185780516001600160a01b03908116600090815260026020908152604080832081518083019092528054851682526001015490931690830152805b8851811015612cbd5782602001516001600160a01b0316898281518110612c5657612c566133e5565b6020026020010151600001516001600160a01b031603612cab578360400151898281518110612c8757612c876133e5565b6020026020010151602001818151612c9f91906134f5565b90525060019150612cbd565b80612cb581613440565b915050612c2d565b5080612d1557604051806040016040528083602001516001600160a01b031681526020018460400151815250878781518110612cfb57612cfb6133e5565b60200260200101819052508580612d1190613440565b9650505b50505b5091979650505050505050565b805115612d355780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215612d6057600080fd5b81356001600160e01b031981168114610c1f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612db057612db0612d78565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612dde57612dde612d78565b604052919050565b60006001600160401b03821115612dff57612dff612d78565b5060051b60200190565b6001600160a01b0381168114610b0557600080fd5b6000612e31612e2c84612de6565b612db6565b83815290506020808201906060808602850187811115612e5057600080fd5b855b81811015612ebb5782818a031215612e6a5760008081fd5b604080518481018181106001600160401b0382111715612e8c57612e8c612d78565b82528235612e9981612e09565b8152828601358682015281830135918101919091528552938301938201612e52565b50505050509392505050565b60008060408385031215612eda57600080fd5b8235915060208301356001600160401b03811115612ef757600080fd5b8301601f81018513612f0857600080fd5b612f1785823560208401612e1e565b9150509250929050565b600060208284031215612f3357600080fd5b5035919050565b60008060408385031215612f4d57600080fd5b823591506020830135612f5f81612e09565b809150509250929050565b600082601f830112612f7b57600080fd5b81356020612f8b612e2c83612de6565b82815260069290921b84018101918181019086841115612faa57600080fd5b8286015b84811015612ff25760408189031215612fc75760008081fd5b612fcf612d8e565b8135612fda81612e09565b81528185013585820152835291830191604001612fae565b509695505050505050565b60006020828403121561300f57600080fd5b81356001600160401b0381111561302557600080fd5b61303184828501612f6a565b949350505050565b6000806040838503121561304c57600080fd5b823561305781612e09565b91506020838101356001600160401b038082111561307457600080fd5b818601915086601f83011261308857600080fd5b81358181111561309a5761309a612d78565b6130ac601f8201601f19168501612db6565b915080825287848285010111156130c257600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000606084860312156130f557600080fd5b833561310081612e09565b95602085013595506040909401359392505050565b60008060006060848603121561312a57600080fd5b833561313581612e09565b9250602084013561314581612e09565b9150604084013561315581612e09565b809150509250925092565b6000806000806080858703121561317657600080fd5b843561318181612e09565b966020860135965060408601359560600135945092505050565b60008060008060008060c087890312156131b457600080fd5b86356131bf81612e09565b95506020870135945060408701356131d681612e09565b935060608701356131e681612e09565b925060808701356131f681612e09565b915060a087013561320681612e09565b809150509295509295509295565b60005b8381101561322f578181015183820152602001613217565b50506000910152565b6020815260008251806020840152613257816040850160208701613214565b601f01601f19169190910160400192915050565b60006020828403121561327d57600080fd5b8135610c1f81612e09565b600082601f83011261329957600080fd5b610c1f83833560208501612e1e565b600080600080608085870312156132be57600080fd5b8435935060208501356001600160401b03808211156132dc57600080fd5b6132e888838901612f6a565b945060408701359150808211156132fe57600080fd5b61330a88838901613288565b9350606087013591508082111561332057600080fd5b5061332d87828801612f6a565b91505092959194509250565b600080600080600080600060e0888a03121561335457600080fd5b8735965060208801356001600160401b038082111561337257600080fd5b61337e8b838c01612f6a565b975060408a013591508082111561339457600080fd5b6133a08b838c01613288565b965060608a01359150808211156133b657600080fd5b506133c38a828b01612f6a565b979a969950949760808101359660a0820135965060c090910135945092505050565b634e487b7160e01b600052603260045260246000fd5b6000855161340d818460208a01613214565b919091019384525060208301919091526040820152606001919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016134525761345261342a565b5060010190565b6000806040838503121561346c57600080fd5b505080516020909101519092909150565b818103818111156106a3576106a361342a565b60008161349f5761349f61342a565b506000190190565b600081518084526020808501945080840160005b838110156134d7578151875295820195908201906001016134bb565b509495945050505050565b602081526000610c1f60208301846134a7565b808201808211156106a3576106a361342a565b60006020828403121561351a57600080fd5b8151610c1f81612e09565b60006020828403121561353757600080fd5b81518015158114610c1f57600080fd5b60008451613559818460208901613214565b91909101928352506020820152604001919050565b600060608083018684526020868186015260408381870152828751808552608088019150838901945060005b818110156135d057855180516001600160a01b03168452858101518685015284015184840152948401949186019160010161359a565b50909a9950505050505050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561360857600080fd5b5051919050565b83815282602082015260606040820152600061295d60608301846134a7565b600181815b8085111561366957816000190482111561364f5761364f61342a565b8085161561365c57918102915b93841c9390800290613633565b509250929050565b600082613680575060016106a3565b8161368d575060006106a3565b81600181146136a357600281146136ad576136c9565b60019150506106a3565b60ff8411156136be576136be61342a565b50506001821b6106a3565b5060208310610133831016604e8410600b84101617156136ec575081810a6106a3565b6136f6838361362e565b806000190482111561370a5761370a61342a565b029392505050565b6000610c1f8383613671565b82815260406020820152600061303160408301846134a7565b60008251613749818460208701613214565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbce127292c8f7eb20e1ae830ed6055b6eb36e261836100610d12677231d0791f7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a2646970667358221220cc50e58d914a60a3a354b9b14b69c089b3d7a64d3575dda716b36a9f5bf28b2b64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint256,address,address,address,address)": {
        "params": {
          "_l2PoolingManager": "troveManager address",
          "_relayer": "relayer address",
          "_starknetCore": "starknetCore address"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,uint256,address,address,address,address)": {
        "notice": "Initialier the contract state."
      },
      "starknetCore()": {
        "notice": "Starknet messaging interface."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7776,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "starknetCore",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IStarknetMessaging)7635"
      },
      {
        "astId": 5220,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "l2PoolingManager",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5225,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "strategyInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(StrategyInfo)7076_storage)"
      },
      {
        "astId": 5227,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "batchCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5229,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "ethBridge",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5231,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "ethWrapped",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5235,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "pendingRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(StrategyReportL2)7088_storage)dyn_storage"
      },
      {
        "astId": 5239,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "pendingRequestsExecuted",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(StrategyReportL1)7095_storage)dyn_storage"
      },
      {
        "astId": 5241,
        "contract": "contracts/PoolingManager.sol:PoolingManager",
        "label": "pendingRequestsExecutedCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StrategyReportL1)7095_storage)dyn_storage": {
        "base": "t_struct(StrategyReportL1)7095_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyReportL1[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StrategyReportL2)7088_storage)dyn_storage": {
        "base": "t_struct(StrategyReportL2)7088_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyReportL2[]",
        "numberOfBytes": "32"
      },
      "t_contract(IStarknetMessaging)7635": {
        "encoding": "inplace",
        "label": "contract IStarknetMessaging",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StrategyInfo)7076_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyInfo)7076_storage"
      },
      "t_struct(StrategyInfo)7076_storage": {
        "encoding": "inplace",
        "label": "struct StrategyInfo",
        "members": [
          {
            "astId": 7073,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "underlying",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7075,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "bridge",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyReportL1)7095_storage": {
        "encoding": "inplace",
        "label": "struct StrategyReportL1",
        "members": [
          {
            "astId": 7090,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "l1Strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7092,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "l1Nav",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7094,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StrategyReportL2)7088_storage": {
        "encoding": "inplace",
        "label": "struct StrategyReportL2",
        "members": [
          {
            "astId": 7083,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "l1Strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7085,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "actionId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7087,
            "contract": "contracts/PoolingManager.sol:PoolingManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}