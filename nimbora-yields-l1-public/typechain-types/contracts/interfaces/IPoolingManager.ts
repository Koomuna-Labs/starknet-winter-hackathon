/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type StrategyReportL1Struct = {
  l1Strategy: AddressLike;
  l1Nav: BigNumberish;
  amount: BigNumberish;
};

export type StrategyReportL1StructOutput = [
  l1Strategy: string,
  l1Nav: bigint,
  amount: bigint
] & { l1Strategy: string; l1Nav: bigint; amount: bigint };

export type StrategyInfoStruct = {
  underlying: AddressLike;
  bridge: AddressLike;
};

export type StrategyInfoStructOutput = [underlying: string, bridge: string] & {
  underlying: string;
  bridge: string;
};

export type BridgeInteractionInfoStruct = {
  bridge: AddressLike;
  amount: BigNumberish;
};

export type BridgeInteractionInfoStructOutput = [
  bridge: string,
  amount: bigint
] & { bridge: string; amount: bigint };

export type StrategyReportL2Struct = {
  l1Strategy: AddressLike;
  actionId: BigNumberish;
  amount: BigNumberish;
};

export type StrategyReportL2StructOutput = [
  l1Strategy: string,
  actionId: bigint,
  amount: bigint
] & { l1Strategy: string; actionId: bigint; amount: bigint };

export interface IPoolingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgeEthFeesMultiplicator"
      | "cancelDepositRequestBridge"
      | "claimBridgeCancelDepositRequestAndDeposit"
      | "executePendingRequests"
      | "handleReport"
      | "hashFromCalldata"
      | "hashFromReportL1"
      | "initialize"
      | "registerStrategy"
      | "resendMessageToL2"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeCancelDepositRequestClaimedAndDeposited"
      | "CancelDepositRequestBridgeSent"
      | "MessageResentToL2"
      | "PendingRequestsExecuted"
      | "ReportHandled"
      | "StrategyRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bridgeEthFeesMultiplicator",
    values: [BridgeInteractionInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDepositRequestBridge",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBridgeCancelDepositRequestAndDeposit",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executePendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleReport",
    values: [
      BridgeInteractionInfoStruct[],
      StrategyReportL2Struct[],
      BridgeInteractionInfoStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashFromCalldata",
    values: [
      BridgeInteractionInfoStruct[],
      StrategyReportL2Struct[],
      BridgeInteractionInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashFromReportL1",
    values: [BigNumberish, StrategyReportL1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStrategy",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resendMessageToL2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeEthFeesMultiplicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDepositRequestBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBridgeCancelDepositRequestAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashFromCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashFromReportL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resendMessageToL2",
    data: BytesLike
  ): Result;
}

export namespace BridgeCancelDepositRequestClaimedAndDepositedEvent {
  export type InputTuple = [
    l1BridgeAddress: AddressLike,
    amount: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    l1BridgeAddress: string,
    amount: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    l1BridgeAddress: string;
    amount: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelDepositRequestBridgeSentEvent {
  export type InputTuple = [
    l1BridgeAddress: AddressLike,
    amount: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    l1BridgeAddress: string,
    amount: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    l1BridgeAddress: string;
    amount: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageResentToL2Event {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingRequestsExecutedEvent {
  export type InputTuple = [indices: BigNumberish[]];
  export type OutputTuple = [indices: bigint[]];
  export interface OutputObject {
    indices: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportHandledEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    strategyReportL1: StrategyReportL1Struct[]
  ];
  export type OutputTuple = [
    epoch: bigint,
    strategyReportL1: StrategyReportL1StructOutput[]
  ];
  export interface OutputObject {
    epoch: bigint;
    strategyReportL1: StrategyReportL1StructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRegisteredEvent {
  export type InputTuple = [
    strategy: AddressLike,
    strategyInfo: StrategyInfoStruct
  ];
  export type OutputTuple = [
    strategy: string,
    strategyInfo: StrategyInfoStructOutput
  ];
  export interface OutputObject {
    strategy: string;
    strategyInfo: StrategyInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolingManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolingManager;
  waitForDeployment(): Promise<this>;

  interface: IPoolingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgeEthFeesMultiplicator: TypedContractMethod<
    [bridgeDepositInfo: BridgeInteractionInfoStruct[]],
    [bigint],
    "view"
  >;

  cancelDepositRequestBridge: TypedContractMethod<
    [l1BridgeAddress: AddressLike, amount: BigNumberish, nonce: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimBridgeCancelDepositRequestAndDeposit: TypedContractMethod<
    [
      l1BridgeAddress: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      l2BridgeEthFee: BigNumberish
    ],
    [void],
    "payable"
  >;

  executePendingRequests: TypedContractMethod<[], [void], "nonpayable">;

  handleReport: TypedContractMethod<
    [
      bridgeWithdrawInfo: BridgeInteractionInfoStruct[],
      strategyReportL2: StrategyReportL2Struct[],
      bridgeDepositInfo: BridgeInteractionInfoStruct[],
      l2BridgeEthFee: BigNumberish,
      l2MessagingEthFee: BigNumberish
    ],
    [void],
    "payable"
  >;

  hashFromCalldata: TypedContractMethod<
    [
      bridgeWithdrawInfo: BridgeInteractionInfoStruct[],
      strategyReportL2: StrategyReportL2Struct[],
      bridgeDepositInfo: BridgeInteractionInfoStruct[]
    ],
    [bigint],
    "view"
  >;

  hashFromReportL1: TypedContractMethod<
    [epoch: BigNumberish, strategyReportL1: StrategyReportL1Struct[]],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _l2PoolingManager: BigNumberish,
      _starknetCore: AddressLike,
      _relayer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  registerStrategy: TypedContractMethod<
    [_strategy: AddressLike, _underlying: AddressLike, _bridge: AddressLike],
    [void],
    "payable"
  >;

  resendMessageToL2: TypedContractMethod<[], [bigint], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgeEthFeesMultiplicator"
  ): TypedContractMethod<
    [bridgeDepositInfo: BridgeInteractionInfoStruct[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelDepositRequestBridge"
  ): TypedContractMethod<
    [l1BridgeAddress: AddressLike, amount: BigNumberish, nonce: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimBridgeCancelDepositRequestAndDeposit"
  ): TypedContractMethod<
    [
      l1BridgeAddress: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      l2BridgeEthFee: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executePendingRequests"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "handleReport"
  ): TypedContractMethod<
    [
      bridgeWithdrawInfo: BridgeInteractionInfoStruct[],
      strategyReportL2: StrategyReportL2Struct[],
      bridgeDepositInfo: BridgeInteractionInfoStruct[],
      l2BridgeEthFee: BigNumberish,
      l2MessagingEthFee: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "hashFromCalldata"
  ): TypedContractMethod<
    [
      bridgeWithdrawInfo: BridgeInteractionInfoStruct[],
      strategyReportL2: StrategyReportL2Struct[],
      bridgeDepositInfo: BridgeInteractionInfoStruct[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashFromReportL1"
  ): TypedContractMethod<
    [epoch: BigNumberish, strategyReportL1: StrategyReportL1Struct[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _l2PoolingManager: BigNumberish,
      _starknetCore: AddressLike,
      _relayer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerStrategy"
  ): TypedContractMethod<
    [_strategy: AddressLike, _underlying: AddressLike, _bridge: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "resendMessageToL2"
  ): TypedContractMethod<[], [bigint], "payable">;

  getEvent(
    key: "BridgeCancelDepositRequestClaimedAndDeposited"
  ): TypedContractEvent<
    BridgeCancelDepositRequestClaimedAndDepositedEvent.InputTuple,
    BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputTuple,
    BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CancelDepositRequestBridgeSent"
  ): TypedContractEvent<
    CancelDepositRequestBridgeSentEvent.InputTuple,
    CancelDepositRequestBridgeSentEvent.OutputTuple,
    CancelDepositRequestBridgeSentEvent.OutputObject
  >;
  getEvent(
    key: "MessageResentToL2"
  ): TypedContractEvent<
    MessageResentToL2Event.InputTuple,
    MessageResentToL2Event.OutputTuple,
    MessageResentToL2Event.OutputObject
  >;
  getEvent(
    key: "PendingRequestsExecuted"
  ): TypedContractEvent<
    PendingRequestsExecutedEvent.InputTuple,
    PendingRequestsExecutedEvent.OutputTuple,
    PendingRequestsExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ReportHandled"
  ): TypedContractEvent<
    ReportHandledEvent.InputTuple,
    ReportHandledEvent.OutputTuple,
    ReportHandledEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRegistered"
  ): TypedContractEvent<
    StrategyRegisteredEvent.InputTuple,
    StrategyRegisteredEvent.OutputTuple,
    StrategyRegisteredEvent.OutputObject
  >;

  filters: {
    "BridgeCancelDepositRequestClaimedAndDeposited(address,uint256,uint256)": TypedContractEvent<
      BridgeCancelDepositRequestClaimedAndDepositedEvent.InputTuple,
      BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputTuple,
      BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputObject
    >;
    BridgeCancelDepositRequestClaimedAndDeposited: TypedContractEvent<
      BridgeCancelDepositRequestClaimedAndDepositedEvent.InputTuple,
      BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputTuple,
      BridgeCancelDepositRequestClaimedAndDepositedEvent.OutputObject
    >;

    "CancelDepositRequestBridgeSent(address,uint256,uint256)": TypedContractEvent<
      CancelDepositRequestBridgeSentEvent.InputTuple,
      CancelDepositRequestBridgeSentEvent.OutputTuple,
      CancelDepositRequestBridgeSentEvent.OutputObject
    >;
    CancelDepositRequestBridgeSent: TypedContractEvent<
      CancelDepositRequestBridgeSentEvent.InputTuple,
      CancelDepositRequestBridgeSentEvent.OutputTuple,
      CancelDepositRequestBridgeSentEvent.OutputObject
    >;

    "MessageResentToL2()": TypedContractEvent<
      MessageResentToL2Event.InputTuple,
      MessageResentToL2Event.OutputTuple,
      MessageResentToL2Event.OutputObject
    >;
    MessageResentToL2: TypedContractEvent<
      MessageResentToL2Event.InputTuple,
      MessageResentToL2Event.OutputTuple,
      MessageResentToL2Event.OutputObject
    >;

    "PendingRequestsExecuted(uint256[])": TypedContractEvent<
      PendingRequestsExecutedEvent.InputTuple,
      PendingRequestsExecutedEvent.OutputTuple,
      PendingRequestsExecutedEvent.OutputObject
    >;
    PendingRequestsExecuted: TypedContractEvent<
      PendingRequestsExecutedEvent.InputTuple,
      PendingRequestsExecutedEvent.OutputTuple,
      PendingRequestsExecutedEvent.OutputObject
    >;

    "ReportHandled(uint256,tuple[])": TypedContractEvent<
      ReportHandledEvent.InputTuple,
      ReportHandledEvent.OutputTuple,
      ReportHandledEvent.OutputObject
    >;
    ReportHandled: TypedContractEvent<
      ReportHandledEvent.InputTuple,
      ReportHandledEvent.OutputTuple,
      ReportHandledEvent.OutputObject
    >;

    "StrategyRegistered(address,tuple)": TypedContractEvent<
      StrategyRegisteredEvent.InputTuple,
      StrategyRegisteredEvent.OutputTuple,
      StrategyRegisteredEvent.OutputObject
    >;
    StrategyRegistered: TypedContractEvent<
      StrategyRegisteredEvent.InputTuple,
      StrategyRegisteredEvent.OutputTuple,
      StrategyRegisteredEvent.OutputObject
    >;
  };
}
